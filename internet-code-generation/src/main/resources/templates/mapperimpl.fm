package org.enargit.karaf.mapper.impl;

import org.enargit.karaf.core.dto.${entityName}DTO;
import org.enargit.karaf.core.entities.${entityName};
import org.enargit.karaf.core.pagination.Page;
import org.enargit.karaf.core.pagination.PageImpl;
import org.enargit.karaf.core.pagination.PageRequest;
import org.enargit.karaf.mapper.api.${entityName}Mapper;
import org.enargit.karaf.mapper.impl.converter.${entityName}DTOTo${entityName}Converter;
import org.enargit.karaf.mapper.impl.converter.${entityName}To${entityName}DTOConverter;
import org.modelmapper.ModelMapper;
import org.modelmapper.TypeMap;
import org.modelmapper.convention.MatchingStrategies;
import org.osgi.service.component.annotations.Component;

import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;


@Component(service = ${entityName}Mapper.class, name = "${entityName}Mapper", immediate = true)
public class ${entityName}MapperImpl implements ${entityName}Mapper {

    @Override
    public List<${entityName}> convertToEntityList(List<${entityName}DTO> dtoList) {
        return dtoList.stream().map(dto -> convertToEntity(dto)).collect(Collectors.toList());
    }

    @Override
    public List<${entityName}DTO> convertToDTOList(List<${entityName}> entityList) {
        return entityList.stream().map(entity -> convertToDTO(entity)).collect(Collectors.toList());
    }

    @Override
    public Set<${entityName}> convertToEntitySet(Set<${entityName}DTO> dtoSet) {
        return dtoSet.stream().map(dto -> convertToEntity(dto)).collect(Collectors.toSet());
    }

    @Override
    public Set<${entityName}DTO> convertToDTOSet(Set<${entityName}> entitySet) {
        return entitySet.stream().map(entity -> convertToDTO(entity)).collect(Collectors.toSet());
    }

    @Override
    public ${entityName} convertToEntity(${entityName}DTO dto) {
        ModelMapper modelMapper = new ModelMapper();
        modelMapper.getConfiguration().setFieldMatchingEnabled(true).setDeepCopyEnabled(true).setMatchingStrategy(MatchingStrategies.LOOSE);
        TypeMap<${entityName}DTO, ${entityName}> map = modelMapper.createTypeMap(${entityName}DTO.class, ${entityName}.class);
        map.addMappings(mapper -> {
            mapper.using(new ${entityName}DTOTo${entityName}Converter());
        });
        return modelMapper.map(dto, ${entityName}.class);
    }

    @Override
    public ${entityName}DTO convertToDTO(${entityName} entity) {
        ModelMapper modelMapper = new ModelMapper();
        modelMapper.getConfiguration().setFieldMatchingEnabled(true).setDeepCopyEnabled(true).setMatchingStrategy(MatchingStrategies.LOOSE);
        TypeMap<${entityName}, ${entityName}DTO> map = modelMapper.createTypeMap(${entityName}.class, ${entityName}DTO.class);
        map.addMappings(mapper -> {
            mapper.using(new ${entityName}To${entityName}DTOConverter());
        });
        return modelMapper.map(entity, ${entityName}DTO.class);
    }

    @Override
    public Page<${entityName}> convertToEntityPage(Page<${entityName}DTO> dtoPage) {
        List<${entityName}> entityList = convertToEntityList(dtoPage.getContent()); 
        return new PageImpl<${entityName}>(entityList, PageRequest.of(dtoPage.getNumber(), dtoPage.getSize()), dtoPage.getTotalElements());
    }

    @Override
    public Page<${entityName}DTO> convertToDTOPage(Page<${entityName}> entityPage) {
        List<${entityName}DTO> dtoList = convertToDTOList(entityPage.getContent());
        return new PageImpl<${entityName}DTO>(dtoList, PageRequest.of(entityPage.getNumber(), entityPage.getSize()), entityPage.getTotalElements());
    }
}                                                                
                                                                